import time
import pandas as pd
import csv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from datetime import datetime
import os

class AddBookTestCSV:
    def __init__(self, csv_file="add_book_test_data.csv"):
        self.csv_file = csv_file
        self.results = []
        self.driver = None
        
    def setup_driver(self):
        """Thi·∫øt l·∫≠p Chrome driver"""
        chrome_options = Options()
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--allow-running-insecure-content")
        
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        self.driver.maximize_window()
        self.driver.implicitly_wait(10)
    
    def load_test_data(self):
        """ƒê·ªçc d·ªØ li·ªáu test t·ª´ file CSV"""
        test_data = []
        
        try:
            with open(self.csv_file, 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file)
                for row in reader:
                    test_data.append({
                        'stt': row['STT'],
                        'test_case': row['Test_Case'],
                        'book_name': row['Book_Name'] if row['Book_Name'] else '',
                        'page_count': row['Page_Count'] if row['Page_Count'] else '',
                        'author_id': row['Author_ID'] if row['Author_ID'] else '',
                        'category_id': row['Category_ID'] if row['Category_ID'] else '',
                        'book_cover': row['Book_Cover'] if row['Book_Cover'] else '',
                        'expected': row['Expected'],
                        'description': row['Description']
                    })
            
            print(f"‚úÖ ƒê√£ ƒë·ªçc {len(test_data)} test cases t·ª´ {self.csv_file}")
            return test_data
            
        except FileNotFoundError:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file {self.csv_file}")
            return []
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc file CSV: {str(e)}")
            return []
    
    def test_add_book(self, test_data):
        """Test th√™m s√°ch v·ªõi d·ªØ li·ªáu t·ª´ CSV"""
        start_time = time.time()
        
        try:
            # M·ªü trang th√™m s√°ch
            add_book_url = "file:///" + os.path.abspath("web_ban_sach/front-end/NiceAdmin/forms-elements.html").replace("\\", "/")
            self.driver.get(add_book_url)
            
            print(f"\nüîç Test #{test_data['stt']}: {test_data['test_case']}")
            print(f"   üìù M√¥ t·∫£: {test_data['description']}")
            print(f"   üìö T√™n s√°ch: '{test_data['book_name']}'")
            print(f"   üìÑ S·ªë trang: '{test_data['page_count']}'")
            print(f"   ‚úçÔ∏è ID t√°c gi·∫£: '{test_data['author_id']}'")
            print(f"   üìÇ Th·ªÉ lo·∫°i: '{test_data['category_id']}'")
            print(f"   üñºÔ∏è B√¨a s√°ch: '{test_data['book_cover']}'")
            print(f"   üéØ K·∫øt qu·∫£ mong ƒë·ª£i: {test_data['expected']}")
            
            # Ch·ªù trang load
            time.sleep(2)
            
            # T√¨m v√† ƒëi·ªÅn t√™n s√°ch
            book_name_field = self.driver.find_element(By.ID, "bookName")
            book_name_field.clear()
            book_name_field.send_keys(test_data['book_name'])
            
            # T√¨m v√† ƒëi·ªÅn s·ªë trang
            page_count_field = self.driver.find_element(By.ID, "pageCount")
            page_count_field.clear()
            page_count_field.send_keys(test_data['page_count'])
            
            # T√¨m v√† ƒëi·ªÅn ID t√°c gi·∫£
            author_id_field = self.driver.find_element(By.ID, "authorId")
            author_id_field.clear()
            author_id_field.send_keys(test_data['author_id'])
            
            # T√¨m v√† ƒëi·ªÅn th·ªÉ lo·∫°i
            category_id_field = self.driver.find_element(By.ID, "categoryId")
            category_id_field.clear()
            category_id_field.send_keys(test_data['category_id'])
            
            # Upload file b√¨a s√°ch (n·∫øu c√≥)
            if test_data['book_cover']:
                try:
                    book_cover_field = self.driver.find_element(By.ID, "bookCover")
                    # T·∫°o file dummy ƒë·ªÉ test upload
                    dummy_file_path = os.path.abspath("dummy_book_cover.txt")
                    with open(dummy_file_path, 'w') as f:
                        f.write("dummy book cover content")
                    book_cover_field.send_keys(dummy_file_path)
                except Exception as upload_error:
                    print(f"   ‚ö†Ô∏è Kh√¥ng th·ªÉ upload file: {upload_error}")
            
            # Click n√∫t Submit
            submit_button = self.driver.find_element(By.XPATH, "//button[@type='submit']")
            submit_button.click()
            
            # Ch·ªù 2 gi√¢y ƒë·ªÉ xem k·∫øt qu·∫£
            time.sleep(2)
            
            execution_time = round(time.time() - start_time, 2)
            
            # Ki·ªÉm tra validation
            validation_result = self.check_validation(test_data)
            
            # L∆∞u k·∫øt qu·∫£
            result = {
                'STT': test_data['stt'],
                'Test Case': test_data['test_case'],
                'T√™n s√°ch': test_data['book_name'],
                'S·ªë trang': test_data['page_count'],
                'ID t√°c gi·∫£': test_data['author_id'],
                'Th·ªÉ lo·∫°i': test_data['category_id'],
                'B√¨a s√°ch': test_data['book_cover'],
                'Expected': test_data['expected'],
                'Actual': validation_result['status'],
                'Status': 'PASS' if validation_result['status'] == test_data['expected'] else 'FAIL',
                'Th·ªùi gian (s)': execution_time,
                'M√¥ t·∫£': test_data['description'],
                'Ghi ch√∫': validation_result['message']
            }
            
            self.results.append(result)
            status_icon = "‚úÖ" if result['Status'] == 'PASS' else "‚ùå"
            print(f"   {status_icon} K·∫øt qu·∫£: {result['Status']} - {validation_result['message']}")
            
        except Exception as e:
            execution_time = round(time.time() - start_time, 2)
            result = {
                'STT': test_data['stt'],
                'Test Case': test_data['test_case'],
                'T√™n s√°ch': test_data['book_name'],
                'S·ªë trang': test_data['page_count'],
                'ID t√°c gi·∫£': test_data['author_id'],
                'Th·ªÉ lo·∫°i': test_data['category_id'],
                'B√¨a s√°ch': test_data['book_cover'],
                'Expected': test_data['expected'],
                'Actual': 'ERROR',
                'Status': 'FAIL',
                'Th·ªùi gian (s)': execution_time,
                'M√¥ t·∫£': test_data['description'],
                'Ghi ch√∫': f'{str(e)}'
            }
            self.results.append(result)
            print(f"   ‚ùå K·∫øt qu·∫£: TH·∫§T B·∫†I - {str(e)}")
    
    def check_validation(self, test_data):
        """Ki·ªÉm tra validation logic cho form th√™m s√°ch"""
        
        # Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        if not test_data['book_name'].strip():
            return {'status': 'FAIL', 'message': 'T√™n s√°ch kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'}
        
        if not test_data['page_count']:
            return {'status': 'FAIL', 'message': 'S·ªë trang kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'}
        
        if not test_data['author_id'].strip():
            return {'status': 'FAIL', 'message': 'ID t√°c gi·∫£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'}
        
        if not test_data['category_id']:
            return {'status': 'FAIL', 'message': 'Th·ªÉ lo·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'}
        
        # Ki·ªÉm tra s·ªë trang
        try:
            page_count = int(test_data['page_count'])
            if page_count <= 0:
                return {'status': 'FAIL', 'message': 'S·ªë trang ph·∫£i l·ªõn h∆°n 0'}
            if page_count > 10000:
                return {'status': 'FAIL', 'message': 'S·ªë trang kh√¥ng th·ªÉ qu√° 10000'}
        except ValueError:
            return {'status': 'FAIL', 'message': 'S·ªë trang ph·∫£i l√† s·ªë nguy√™n'}
        
        # Ki·ªÉm tra th·ªÉ lo·∫°i
        try:
            category_id = int(test_data['category_id'])
            if category_id <= 0:
                return {'status': 'FAIL', 'message': 'Th·ªÉ lo·∫°i ph·∫£i l·ªõn h∆°n 0'}
            if category_id > 1000:
                return {'status': 'FAIL', 'message': 'Th·ªÉ lo·∫°i v∆∞·ª£t qu√° gi·ªõi h·∫°n'}
        except ValueError:
            return {'status': 'FAIL', 'message': 'Th·ªÉ lo·∫°i ph·∫£i l√† s·ªë nguy√™n'}
        
        # Ki·ªÉm tra ƒë·ªô d√†i t√™n s√°ch
        if len(test_data['book_name']) > 100:
            return {'status': 'FAIL', 'message': 'T√™n s√°ch qu√° d√†i (t·ªëi ƒëa 100 k√Ω t·ª±)'}
        
        # Ki·ªÉm tra ID t√°c gi·∫£ c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát (tr·ª´ s·ªë v√† ch·ªØ)
        author_id = test_data['author_id']
        if not author_id.replace('_', '').replace('-', '').isalnum():
            return {'status': 'FAIL', 'message': 'ID t√°c gi·∫£ ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ, s·ªë, d·∫•u g·∫°ch d∆∞·ªõi v√† g·∫°ch ngang'}
        
        return {'status': 'PASS', 'message': 'Th√™m s√°ch h·ª£p l·ªá'}
    
    def export_to_excel(self):
        """Export k·∫øt qu·∫£ ra Excel"""
        if not self.results:
            print("Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ export!")
            return
        
        # T·∫°o DataFrame
        df = pd.DataFrame(self.results)
        
        # T·∫°o th∆∞ m·ª•c k·∫øt qu·∫£
        os.makedirs('test_results', exist_ok=True)
        
        # T√™n file v·ªõi timestamp
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'test_results/add_book_test.xlsx'
        
        # Export Excel
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            # Sheet k·∫øt qu·∫£ chi ti·∫øt
            df.to_excel(writer, sheet_name='K·∫øt qu·∫£ test th√™m s√°ch', index=False)
            
            # T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt
            worksheet = writer.sheets['K·∫øt qu·∫£ test th√™m s√°ch']
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 30)
                worksheet.column_dimensions[column_letter].width = adjusted_width
            
            # Sheet t√≥m t·∫Øt
            total = len(self.results)
            passed = len([r for r in self.results if r['Status'] == 'PASS'])
            failed = total - passed
            expected_pass = len([r for r in self.results if r['Expected'] == 'PASS'])
            expected_fail = len([r for r in self.results if r['Expected'] == 'FAIL'])
            pass_rate = round((passed/total)*100, 1) if total > 0 else 0
            
            # Th·ªëng k√™ theo lo·∫°i test
            fail_cases = {
                'Tr∆∞·ªùng tr·ªëng': len([r for r in self.results if 'tr·ªëng' in r['Test Case'].lower()]),
                'Validation l·ªói': len([r for r in self.results if any(word in r['Test Case'].lower() for word in ['√¢m', 'l·ªõn', 'ch·ªØ', 'k√Ω t·ª±'])]),
                'H·ª£p l·ªá': len([r for r in self.results if r['Expected'] == 'PASS'])
            }
            
            summary = pd.DataFrame({
                'Th√¥ng s·ªë': [
                    'T·ªïng s·ªë test', 
                    'Th·ª±c t·∫ø PASS', 
                    'Th·ª±c t·∫ø FAIL',
                    'Mong ƒë·ª£i PASS',
                    'Mong ƒë·ª£i FAIL',
                    'T·ª∑ l·ªá ƒë√∫ng (%)',
                    'Avg execution time (s)',
                    '---',
                    'Test tr∆∞·ªùng tr·ªëng',
                    'Test validation l·ªói',
                    'Test h·ª£p l·ªá'
                ],
                'Gi√° tr·ªã': [
                    total, 
                    passed, 
                    failed, 
                    expected_pass, 
                    expected_fail, 
                    pass_rate,
                    round(sum([r['Th·ªùi gian (s)'] for r in self.results]) / total, 2) if total > 0 else 0,
                    '---',
                    fail_cases['Tr∆∞·ªùng tr·ªëng'],
                    fail_cases['Validation l·ªói'],
                    fail_cases['H·ª£p l·ªá']
                ]
            })
            summary.to_excel(writer, sheet_name='T√≥m t·∫Øt', index=False)
            
            # Sheet test data g·ªëc
            df_original = pd.read_csv(self.csv_file)
            df_original.to_excel(writer, sheet_name='Test Data G·ªëc', index=False)
        
        print(f"\nüìä ƒê√£ xu·∫•t k·∫øt qu·∫£ ra file: {filename}")
        return filename
    
    def cleanup(self):
        """D·ªçn d·∫πp file dummy"""
        try:
            dummy_file = os.path.abspath("dummy_book_cover.txt")
            if os.path.exists(dummy_file):
                os.remove(dummy_file)
        except:
            pass
    
    def run_tests(self):
        """Ch·∫°y t·∫•t c·∫£ test cases t·ª´ CSV"""
        print("=" * 70)
        print("üß™ B·∫ÆT ƒê·∫¶U TEST TH√äM S√ÅCH T·ª™ FILE CSV")
        print("=" * 70)
        
        # ƒê·ªçc d·ªØ li·ªáu test t·ª´ CSV
        test_data_list = self.load_test_data()
        
        if not test_data_list:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu test ƒë·ªÉ ch·∫°y!")
            return
        
        # Thi·∫øt l·∫≠p driver
        self.setup_driver()
        
        print(f"üöÄ S·∫Ω ch·∫°y {len(test_data_list)} test cases...")
        
        # Ch·∫°y t·ª´ng test
        for test_data in test_data_list:
            self.test_add_book(test_data)
            time.sleep(1)  # Ngh·ªâ 1 gi√¢y gi·ªØa c√°c test
        
        # ƒê√≥ng browser
        self.driver.quit()
        
        # D·ªçn d·∫πp
        self.cleanup()
        
        # Hi·ªÉn th·ªã t√≥m t·∫Øt k·∫øt qu·∫£
        print("\n" + "=" * 70)
        print("üìã T√ìM T·∫ÆT K·∫æT QU·∫¢ TEST TH√äM S√ÅCH")
        print("=" * 70)
        
        total = len(self.results)
        passed = len([r for r in self.results if r['Status'] == 'PASS'])
        failed = total - passed
        expected_pass = len([r for r in self.results if r['Expected'] == 'PASS'])
        
        print(f"üìä T·ªïng s·ªë test: {total}")
        print(f"‚úÖ Test ƒë√∫ng: {passed}")
        print(f"‚ùå Test sai: {failed}")
        print(f"üéØ Test cases mong ƒë·ª£i PASS: {expected_pass}")
        print(f"üìà T·ª∑ l·ªá test ƒë√∫ng: {round((passed/total)*100, 1)}%")
        
        # Th·ªëng k√™ theo lo·∫°i
        print(f"\nüìä Ph√¢n lo·∫°i test:")
        print(f"   üìù Test tr∆∞·ªùng tr·ªëng: {len([r for r in self.results if 'tr·ªëng' in r['Test Case'].lower()])}")
        print(f"   ‚ö†Ô∏è Test validation: {len([r for r in self.results if any(word in r['Test Case'].lower() for word in ['√¢m', 'l·ªõn', 'ch·ªØ', 'k√Ω t·ª±'])])}")
        print(f"   ‚úÖ Test h·ª£p l·ªá: {len([r for r in self.results if r['Expected'] == 'PASS'])}")
        
        print("\nüìã Chi ti·∫øt k·∫øt qu·∫£:")
        for result in self.results:
            status_icon = "‚úÖ" if result['Status'] == 'PASS' else "‚ùå"
            print(f"{status_icon} #{result['STT']} {result['Test Case']}: {result['Status']} - {result['Ghi ch√∫']}")
        
        # Export Excel
        excel_file = self.export_to_excel()
        
        print(f"\nüéâ Ho√†n th√†nh! File Excel: {excel_file}")
        print(f"üìÅ File CSV g·ªëc: {self.csv_file}")

if __name__ == "__main__":
    # Ch·∫°y test t·ª´ CSV
    test = AddBookTestCSV("add_book_test_data.csv")
    test.run_tests() 