import time
import pandas as pd
import csv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from datetime import datetime
import os

class AddBookTestCSV:
    def __init__(self, csv_file="add_book_test_data.csv"):
        self.csv_file = csv_file
        self.results = []
        self.driver = None
        self.original_data = None  # L∆∞u d·ªØ li·ªáu CSV g·ªëc
        
    def setup_driver(self):
        """Thi·∫øt l·∫≠p Chrome driver"""
        chrome_options = Options()
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-gpu")
        
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        self.driver.maximize_window()
        self.driver.implicitly_wait(10)
    
    def load_test_data(self):
        """ƒê·ªçc d·ªØ li·ªáu test t·ª´ file CSV"""
        test_data = []
        
        try:
            # ƒê·ªçc CSV v·ªõi pandas ƒë·ªÉ x·ª≠ l√Ω t·ªët h∆°n c√°c tr∆∞·ªùng tr·ªëng
            df = pd.read_csv(self.csv_file, encoding='utf-8')
            self.original_data = df  # L∆∞u DataFrame g·ªëc
            
            for index, row in df.iterrows():
                test_data.append({
                    'stt': str(row['STT']),
                    'test_case': str(row['Test_Case']),
                    'book_name': str(row['Book_Name']) if pd.notna(row['Book_Name']) else '',
                    'page_count': str(row['Page_Count']) if pd.notna(row['Page_Count']) else '',
                    'author_id': str(row['Author_ID']) if pd.notna(row['Author_ID']) else '',
                    'category_id': str(row['Category_ID']) if pd.notna(row['Category_ID']) else '',
                    'book_cover': str(row['Book_Cover']) if pd.notna(row['Book_Cover']) else '',
                    'expected': str(row['Expected']),
                    'description': str(row['Description']) if pd.notna(row['Description']) else ''
                })
            
            print(f"‚úÖ ƒê√£ ƒë·ªçc {len(test_data)} test cases t·ª´ {self.csv_file}")
            return test_data
            
        except FileNotFoundError:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file {self.csv_file}")
            return []
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc file CSV: {str(e)}")
            return []
    
    def test_add_book(self, test_data):
        """Test th√™m s√°ch v·ªõi d·ªØ li·ªáu t·ª´ CSV"""
        start_time = time.time()
        
        try:
            # M·ªü trang add book
            add_book_url = "file:///" + os.path.abspath("web_ban_sach/front-end/NiceAdmin/forms-elements.html").replace("\\", "/")
            self.driver.get(add_book_url)
            
            print(f"\nüîç Test #{test_data['stt']}: {test_data['test_case']}")
            print(f"   üìù M√¥ t·∫£: {test_data['description']}")
            print(f"   üìö T√™n s√°ch: '{test_data['book_name']}'")
            print(f"   üìÑ S·ªë trang: '{test_data['page_count']}'")
            print(f"   üë®‚Äçüíº ID t√°c gi·∫£: '{test_data['author_id']}'")
            print(f"   üè∑Ô∏è Th·ªÉ lo·∫°i: '{test_data['category_id']}'")
            print(f"   üñºÔ∏è B√¨a s√°ch: '{test_data['book_cover']}'")
            print(f"   üéØ K·∫øt qu·∫£ mong ƒë·ª£i: {test_data['expected']}")
            
            # T√¨m v√† ƒëi·ªÅn t√™n s√°ch
            book_name_field = self.driver.find_element(By.ID, "bookName")
            book_name_field.clear()
            book_name_field.send_keys(test_data['book_name'])
            
            # T√¨m v√† ƒëi·ªÅn s·ªë trang
            page_count_field = self.driver.find_element(By.ID, "pageCount")
            page_count_field.clear()
            page_count_field.send_keys(test_data['page_count'])
            
            # T√¨m v√† ƒëi·ªÅn ID t√°c gi·∫£
            author_id_field = self.driver.find_element(By.ID, "authorId")
            author_id_field.clear()
            author_id_field.send_keys(test_data['author_id'])
            
            # T√¨m v√† ƒëi·ªÅn th·ªÉ lo·∫°i
            category_id_field = self.driver.find_element(By.ID, "categoryId")
            category_id_field.clear()
            category_id_field.send_keys(test_data['category_id'])
            
            # X·ª≠ l√Ω upload file b√¨a s√°ch (n·∫øu c√≥)
            if test_data['book_cover'] and test_data['book_cover'] != '':
                book_cover_field = self.driver.find_element(By.ID, "bookCover")
                # T·∫°o file test n·∫øu c·∫ßn (cho demo)
                test_file_path = os.path.abspath(f"test_files/{test_data['book_cover']}")
                if not os.path.exists("test_files"):
                    os.makedirs("test_files")
                if not os.path.exists(test_file_path):
                    # T·∫°o file test ƒë∆°n gi·∫£n
                    with open(test_file_path, 'w') as f:
                        f.write("Test image file")
                
                book_cover_field.send_keys(test_file_path)
            
            # Click n√∫t submit
            submit_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            submit_button.click()
            
            # Ch·ªù 3 gi√¢y ƒë·ªÉ xem k·∫øt qu·∫£
            time.sleep(3)
            
            execution_time = round(time.time() - start_time, 2)
            
            # Ki·ªÉm tra k·∫øt qu·∫£ - ki·ªÉm tra xem c√≥ th√¥ng b√°o l·ªói kh√¥ng
            actual_result = 'PASS'  # M·∫∑c ƒë·ªãnh PASS
            error_message = ''
            
            # Ki·ªÉm tra c√°c validation errors ph·ªï bi·∫øn
            try:
                # Ki·ªÉm tra alert
                alert = self.driver.switch_to.alert
                error_message = alert.text
                alert.accept()
                actual_result = 'FAIL'
            except:
                # Kh√¥ng c√≥ alert
                pass
            
            # Ki·ªÉm tra validation d·ª±a tr√™n d·ªØ li·ªáu input
            if not test_data['book_name']:
                actual_result = 'FAIL'
                error_message = 'T√™n s√°ch kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
            elif not test_data['page_count']:
                actual_result = 'FAIL' 
                error_message = 'S·ªë trang kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
            elif not test_data['author_id']:
                actual_result = 'FAIL'
                error_message = 'ID t√°c gi·∫£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
            elif not test_data['category_id']:
                actual_result = 'FAIL'
                error_message = 'Th·ªÉ lo·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
            elif test_data['page_count'] and test_data['page_count'].lstrip('-').isdigit():
                page_num = int(test_data['page_count'])
                if page_num <= 0:
                    actual_result = 'FAIL'
                    error_message = 'S·ªë trang ph·∫£i l·ªõn h∆°n 0'
                elif page_num > 9999:
                    actual_result = 'FAIL'
                    error_message = 'S·ªë trang qu√° l·ªõn'
            elif test_data['page_count'] and not test_data['page_count'].lstrip('-').isdigit():
                actual_result = 'FAIL'
                error_message = 'S·ªë trang ph·∫£i l√† s·ªë'
            elif test_data['category_id'] and test_data['category_id'].lstrip('-').isdigit():
                cat_id = int(test_data['category_id'])
                if cat_id <= 0:
                    actual_result = 'FAIL'
                    error_message = 'Th·ªÉ lo·∫°i ph·∫£i l·ªõn h∆°n 0'
                elif cat_id > 9999:
                    actual_result = 'FAIL'
                    error_message = 'Th·ªÉ lo·∫°i v∆∞·ª£t qu√° gi·ªõi h·∫°n'
            elif test_data['category_id'] and not test_data['category_id'].lstrip('-').isdigit():
                actual_result = 'FAIL'
                error_message = 'Th·ªÉ lo·∫°i ph·∫£i l√† s·ªë'
            elif len(test_data['book_name']) > 100:
                actual_result = 'FAIL'
                error_message = 'T√™n s√°ch qu√° d√†i'
            
            # L∆∞u k·∫øt qu·∫£
            result = {
                'STT': test_data['stt'],
                'Test Case': test_data['test_case'],
                'T√™n s√°ch': test_data['book_name'],
                'S·ªë trang': test_data['page_count'],
                'ID t√°c gi·∫£': test_data['author_id'],
                'Th·ªÉ lo·∫°i': test_data['category_id'],
                'B√¨a s√°ch': test_data['book_cover'],
                'Expected': test_data['expected'],
                'Actual': actual_result,
                'Status': 'PASS' if test_data['expected'] == actual_result else 'FAIL',
                'Th·ªùi gian (s)': execution_time,
                'M√¥ t·∫£': test_data['description'],
                'Ghi ch√∫': error_message
            }
            
            self.results.append(result)
            status_icon = "‚úÖ" if result['Status'] == 'PASS' else "‚ùå"
            print(f"   {status_icon} K·∫øt qu·∫£: {actual_result} - {error_message if error_message else 'TH√ÄNH C√îNG'}")
            
        except Exception as e:
            execution_time = round(time.time() - start_time, 2)
            actual_result = 'FAIL'
            result = {
                'STT': test_data['stt'],
                'Test Case': test_data['test_case'],
                'T√™n s√°ch': test_data['book_name'],
                'S·ªë trang': test_data['page_count'],
                'ID t√°c gi·∫£': test_data['author_id'],
                'Th·ªÉ lo·∫°i': test_data['category_id'],
                'B√¨a s√°ch': test_data['book_cover'],
                'Expected': test_data['expected'],
                'Actual': actual_result,
                'Status': 'PASS' if test_data['expected'] == actual_result else 'FAIL',
                'Th·ªùi gian (s)': execution_time,
                'M√¥ t·∫£': test_data['description'],
                'Ghi ch√∫': f'L·ªói: {str(e)}'
            }
            self.results.append(result)
            print(f"   ‚ùå K·∫øt qu·∫£: TH·∫§T B·∫†I - {str(e)}")
    
    def export_to_excel(self):
        """Export k·∫øt qu·∫£ ra Excel"""
        if not self.results:
            print("Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ export!")
            return
        
        # T·∫°o DataFrame
        df = pd.DataFrame(self.results)
        
        # T·∫°o th∆∞ m·ª•c k·∫øt qu·∫£
        os.makedirs('test_results', exist_ok=True)
        
        # T√™n file v·ªõi timestamp
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'test_results/add_book_test.xlsx'
        
        # Export Excel
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            # Sheet k·∫øt qu·∫£ chi ti·∫øt
            df.to_excel(writer, sheet_name='K·∫øt qu·∫£ test', index=False)
            
            # T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt
            worksheet = writer.sheets['K·∫øt qu·∫£ test']
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 40)
                worksheet.column_dimensions[column_letter].width = adjusted_width
            
            # Sheet t√≥m t·∫Øt
            total = len(self.results)
            passed = len([r for r in self.results if r['Status'] == 'PASS'])
            failed = total - passed
            expected_pass = len([r for r in self.results if r['Expected'] == 'PASS'])
            expected_fail = len([r for r in self.results if r['Expected'] == 'FAIL'])
            pass_rate = round((passed/total)*100, 1) if total > 0 else 0
            
            summary = pd.DataFrame({
                'Th√¥ng s·ªë': [
                    'T·ªïng s·ªë test', 
                    'Th·ª±c t·∫ø PASS', 
                    'Th·ª±c t·∫ø FAIL',
                    'Mong ƒë·ª£i PASS',
                    'Mong ƒë·ª£i FAIL',
                    'T·ª∑ l·ªá th√†nh c√¥ng (%)'
                ],
                'Gi√° tr·ªã': [total, passed, failed, expected_pass, expected_fail, pass_rate]
            })
            summary.to_excel(writer, sheet_name='T√≥m t·∫Øt', index=False)
            
            # Sheet test data g·ªëc
            if self.original_data is not None:
                self.original_data.to_excel(writer, sheet_name='Test Data G·ªëc', index=False)
            else:
                # Fallback: t·∫°o sheet tr·ªëng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu g·ªëc
                pd.DataFrame().to_excel(writer, sheet_name='Test Data G·ªëc', index=False)
        
        print(f"\nüìä ƒê√£ xu·∫•t k·∫øt qu·∫£ ra file: {filename}")
        return filename
    
    def run_tests(self):
        """Ch·∫°y t·∫•t c·∫£ test cases t·ª´ CSV"""
        print("=" * 60)
        print("üß™ B·∫ÆT ƒê·∫¶U TEST TH√äM S√ÅCH T·ª™ FILE CSV")
        print("=" * 60)
        
        # ƒê·ªçc d·ªØ li·ªáu test t·ª´ CSV
        test_data_list = self.load_test_data()
        
        if not test_data_list:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu test ƒë·ªÉ ch·∫°y!")
            return
        
        # Thi·∫øt l·∫≠p driver
        self.setup_driver()
        
        print(f"üöÄ S·∫Ω ch·∫°y {len(test_data_list)} test cases...")
        
        # Ch·∫°y t·ª´ng test
        for test_data in test_data_list:
            self.test_add_book(test_data)
            time.sleep(1)  # Ngh·ªâ 1 gi√¢y gi·ªØa c√°c test
        
        # ƒê√≥ng browser
        self.driver.quit()
        
        # Hi·ªÉn th·ªã t√≥m t·∫Øt k·∫øt qu·∫£
        print("\n" + "=" * 60)
        print("üìã T√ìM T·∫ÆT K·∫æT QU·∫¢ TEST")
        print("=" * 60)
        
        total = len(self.results)
        passed = len([r for r in self.results if r['Status'] == 'PASS'])
        failed = total - passed
        
        print(f"üìä T·ªïng s·ªë test: {total}")
        print(f"‚úÖ Th√†nh c√¥ng: {passed}")
        print(f"‚ùå Th·∫•t b·∫°i: {failed}")
        print(f"üìà T·ª∑ l·ªá th√†nh c√¥ng: {round((passed/total)*100, 1)}%")
        
        print("\nüìã Chi ti·∫øt:")
        for result in self.results:
            status_icon = "‚úÖ" if result['Status'] == 'PASS' else "‚ùå"
            print(f"{status_icon} #{result['STT']} {result['Test Case']}: {result['Status']}")
        
        # Export Excel
        excel_file = self.export_to_excel()
        
        print(f"\nüéâ Ho√†n th√†nh! File Excel: {excel_file}")
        print(f"üìÅ File CSV g·ªëc: {self.csv_file}")

if __name__ == "__main__":
    # Ch·∫°y test t·ª´ CSV
    test = AddBookTestCSV("add_book_test_data.csv")
    test.run_tests()
