import time
import pandas as pd
import csv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from webdriver_manager.chrome import ChromeDriverManager
from datetime import datetime
import os

class EditBookTestCSV:
    def __init__(self, csv_file="edit_book_test_data.csv"):
        self.csv_file = csv_file
        self.results = []
        self.driver = None
        
    def setup_driver(self):
        """Thi·∫øt l·∫≠p Chrome driver"""
        chrome_options = Options()
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--allow-running-insecure-content")
        
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        self.driver.maximize_window()
        self.driver.implicitly_wait(10)
    
    def load_test_data(self):
        """ƒê·ªçc d·ªØ li·ªáu test t·ª´ file CSV"""
        test_data = []
        
        try:
            with open(self.csv_file, 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file)
                for row in reader:
                    test_data.append({
                        'stt': row['STT'],
                        'test_case': row['Test_Case'],
                        'book_id': row['Book_ID'] if row['Book_ID'] else '',
                        'book_name': row['Book_Name'] if row['Book_Name'] else '',
                        'page_count': row['Page_Count'] if row['Page_Count'] else '',
                        'author_id': row['Author_ID'] if row['Author_ID'] else '',
                        'category_id': row['Category_ID'] if row['Category_ID'] else '',
                        'book_cover': row['Book_Cover'] if row['Book_Cover'] else '',
                        'expected': row['Expected'],
                        'description': row['Description']
                    })
            
            print(f"‚úÖ ƒê√£ ƒë·ªçc {len(test_data)} test cases t·ª´ {self.csv_file}")
            return test_data
            
        except FileNotFoundError:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file {self.csv_file}")
            return []
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc file CSV: {str(e)}")
            return []
    
    def check_alert(self, expected_status):
        """Ki·ªÉm tra v√† x·ª≠ l√Ω alert"""
        wait = WebDriverWait(self.driver, 3)
        alert_text = ""
        alert_found = False
        
        try:
            # Ch·ªù alert xu·∫•t hi·ªán
            alert = wait.until(EC.alert_is_present())
            alert_text = alert.text
            alert_found = True
            
            print(f"   üîî Alert ph√°t hi·ªán: '{alert_text}'")
            
            # Accept alert
            alert.accept()
            
            # Ph√¢n t√≠ch n·ªôi dung alert
            if expected_status == "FAIL":
                if any(keyword in alert_text.lower() for keyword in ["l·ªói", "‚ùå", "kh√¥ng ƒë∆∞·ª£c", "ph·∫£i", "c·∫£nh b√°o", "‚ö†Ô∏è", "kh√¥ng t√¨m th·∫•y", "kh√¥ng t·ªìn t·∫°i"]):
                    return {"found": True, "text": alert_text, "valid": True}
                else:
                    return {"found": True, "text": alert_text, "valid": False}
            else:  # PASS
                if any(keyword in alert_text.lower() for keyword in ["th√†nh c√¥ng", "‚úÖ", "ho√†n th√†nh", "c·∫≠p nh·∫≠t", "s·ª≠a"]):
                    return {"found": True, "text": alert_text, "valid": True}
                else:
                    return {"found": True, "text": alert_text, "valid": False}
                    
        except TimeoutException:
            print(f"   ‚è∞ Kh√¥ng c√≥ alert trong 3 gi√¢y")
            return {"found": False, "text": "", "valid": False}
        except Exception as e:
            print(f"   ‚ùå L·ªói x·ª≠ l√Ω alert: {str(e)}")
            return {"found": False, "text": f"L·ªói: {str(e)}", "valid": False}
    
    def test_edit_book(self, test_data):
        """Test edit s√°ch v·ªõi d·ªØ li·ªáu t·ª´ CSV"""
        start_time = time.time()
        
        try:
            # M·ªü trang edit s√°ch
            edit_book_url = "file:///" + os.path.abspath("web_ban_sach/front-end/NiceAdmin/forms-edit.html").replace("\\", "/")
            self.driver.get(edit_book_url)
            
            print(f"\nüîç Test #{test_data['stt']}: {test_data['test_case']}")
            print(f"   üìù M√¥ t·∫£: {test_data['description']}")
            print(f"   üÜî Book ID: '{test_data['book_id']}'")
            print(f"   üìö T√™n s√°ch: '{test_data['book_name']}'")
            print(f"   üìÑ S·ªë trang: '{test_data['page_count']}'")
            print(f"   ‚úçÔ∏è Author ID: '{test_data['author_id']}'")
            print(f"   üìÇ Category ID: '{test_data['category_id']}'")
            print(f"   üñºÔ∏è B√¨a s√°ch: '{test_data['book_cover']}'")
            print(f"   üéØ K·∫øt qu·∫£ mong ƒë·ª£i: {test_data['expected']}")
            
            # Ch·ªù trang load
            time.sleep(2)
            
            # ƒêi·ªÅn Book ID
            book_id_field = self.driver.find_element(By.ID, "bookid")
            book_id_field.clear()
            book_id_field.send_keys(test_data['book_id'])
            
            # ƒêi·ªÅn t√™n s√°ch
            book_name_field = self.driver.find_element(By.ID, "bookName")
            book_name_field.clear()
            book_name_field.send_keys(test_data['book_name'])
            
            # ƒêi·ªÅn s·ªë trang
            page_count_field = self.driver.find_element(By.ID, "pageCount")
            page_count_field.clear()
            page_count_field.send_keys(test_data['page_count'])
            
            # ƒêi·ªÅn Author ID
            author_id_field = self.driver.find_element(By.ID, "authorId")
            author_id_field.clear()
            author_id_field.send_keys(test_data['author_id'])
            
            # ƒêi·ªÅn Category ID
            category_id_field = self.driver.find_element(By.ID, "categoryId")
            category_id_field.clear()
            category_id_field.send_keys(test_data['category_id'])
            
            # Upload file b√¨a s√°ch (n·∫øu c√≥)
            if test_data['book_cover']:
                try:
                    book_cover_field = self.driver.find_element(By.ID, "bookCover")
                    dummy_file_path = os.path.abspath("dummy_edit_book_cover.txt")
                    with open(dummy_file_path, 'w') as f:
                        f.write("dummy edit book cover content")
                    book_cover_field.send_keys(dummy_file_path)
                except Exception as upload_error:
                    print(f"   ‚ö†Ô∏è Kh√¥ng th·ªÉ upload file: {upload_error}")
            
            # Click n√∫t C·∫≠p nh·∫≠t
            update_button = self.driver.find_element(By.ID, "cap_nhat")
            update_button.click()
            
            # Ki·ªÉm tra alert
            alert_result = self.check_alert(test_data['expected'])
            
            execution_time = round(time.time() - start_time, 2)
            
            # Validation logic (n·∫øu kh√¥ng c√≥ alert)
            if not alert_result['found']:
                validation_result = self.check_validation(test_data)
                actual_status = validation_result['status']
                note = validation_result['message']
            else:
                # ƒê√°nh gi√° k·∫øt qu·∫£ d·ª±a tr√™n alert
                actual_status = "PASS" if alert_result['found'] and alert_result['valid'] else "FAIL"
                note = f"Alert: '{alert_result['text']}' - {'H·ª£p l·ªá' if alert_result['valid'] else 'Kh√¥ng h·ª£p l·ªá'}"
            
            test_status = "PASS" if actual_status == test_data['expected'] else "FAIL"
            
            # L∆∞u k·∫øt qu·∫£
            result = {
                'STT': test_data['stt'],
                'Test Case': test_data['test_case'],
                'Book ID': test_data['book_id'],
                'T√™n s√°ch': test_data['book_name'],
                'S·ªë trang': test_data['page_count'],
                'Author ID': test_data['author_id'],
                'Category ID': test_data['category_id'],
                'B√¨a s√°ch': test_data['book_cover'],
                'Expected': test_data['expected'],
                'Actual': actual_status,
                'Status': test_status,
                'Alert Found': alert_result['found'],
                'Alert Text': alert_result['text'],
                'Alert Valid': alert_result['valid'],
                'Th·ªùi gian (s)': execution_time,
                'Th·ªùi gian test': datetime.now().strftime('%H:%M:%S'),
                'M√¥ t·∫£': test_data['description'],
                'Ghi ch√∫': note
            }
            
            self.results.append(result)
            status_icon = "‚úÖ" if result['Status'] == 'PASS' else "‚ùå"
            print(f"   {status_icon} K·∫øt qu·∫£: {result['Status']} - {note}")
            
        except Exception as e:
            execution_time = round(time.time() - start_time, 2)
            result = {
                'STT': test_data['stt'],
                'Test Case': test_data['test_case'],
                'Book ID': test_data['book_id'],
                'T√™n s√°ch': test_data['book_name'],
                'S·ªë trang': test_data['page_count'],
                'Author ID': test_data['author_id'],
                'Category ID': test_data['category_id'],
                'B√¨a s√°ch': test_data['book_cover'],
                'Expected': test_data['expected'],
                'Actual': 'ERROR',
                'Status': 'FAIL',
                'Alert Found': False,
                'Alert Text': '',
                'Alert Valid': False,
                'Th·ªùi gian (s)': execution_time,
                'Th·ªùi gian test': datetime.now().strftime('%H:%M:%S'),
                'M√¥ t·∫£': test_data['description'],
                'Ghi ch√∫': f'L·ªói: {str(e)}'
            }
            self.results.append(result)
            print(f"   ‚ùå K·∫øt qu·∫£: TH·∫§T B·∫†I - {str(e)}")
    
    def check_validation(self, test_data):
        """Ki·ªÉm tra validation logic cho form edit s√°ch"""
        
        # Ki·ªÉm tra Book ID
        if not test_data['book_id'].strip():
            return {'status': 'FAIL', 'message': 'Book ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'}
        
        try:
            book_id = int(test_data['book_id'])
            if book_id <= 0:
                return {'status': 'FAIL', 'message': 'Book ID ph·∫£i l·ªõn h∆°n 0'}
            if book_id > 9998:  # Gi·∫£ ƒë·ªãnh ID kh√¥ng t·ªìn t·∫°i n·∫øu qu√° l·ªõn
                return {'status': 'FAIL', 'message': 'Book ID kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng'}
        except ValueError:
            return {'status': 'FAIL', 'message': 'Book ID ph·∫£i l√† s·ªë nguy√™n'}
        
        # Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc kh√°c
        if not test_data['book_name'].strip():
            return {'status': 'FAIL', 'message': 'T√™n s√°ch kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'}
        
        if not test_data['page_count']:
            return {'status': 'FAIL', 'message': 'S·ªë trang kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'}
        
        if not test_data['author_id']:
            return {'status': 'FAIL', 'message': 'Author ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'}
        
        if not test_data['category_id']:
            return {'status': 'FAIL', 'message': 'Category ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'}
        
        # Ki·ªÉm tra s·ªë trang
        try:
            page_count = int(test_data['page_count'])
            if page_count <= 0:
                return {'status': 'FAIL', 'message': 'S·ªë trang ph·∫£i l·ªõn h∆°n 0'}
            if page_count > 10000:
                return {'status': 'FAIL', 'message': 'S·ªë trang kh√¥ng th·ªÉ qu√° 10000'}
        except ValueError:
            return {'status': 'FAIL', 'message': 'S·ªë trang ph·∫£i l√† s·ªë nguy√™n'}
        
        # Ki·ªÉm tra Author ID
        try:
            author_id = int(test_data['author_id'])
            if author_id <= 0:
                return {'status': 'FAIL', 'message': 'Author ID ph·∫£i l·ªõn h∆°n 0'}
        except ValueError:
            return {'status': 'FAIL', 'message': 'Author ID ph·∫£i l√† s·ªë nguy√™n'}
        
        # Ki·ªÉm tra Category ID
        try:
            category_id = int(test_data['category_id'])
            if category_id <= 0:
                return {'status': 'FAIL', 'message': 'Category ID ph·∫£i l·ªõn h∆°n 0'}
            if category_id > 1000:
                return {'status': 'FAIL', 'message': 'Category ID v∆∞·ª£t qu√° gi·ªõi h·∫°n'}
        except ValueError:
            return {'status': 'FAIL', 'message': 'Category ID ph·∫£i l√† s·ªë nguy√™n'}
        
        # Ki·ªÉm tra ƒë·ªô d√†i t√™n s√°ch
        if len(test_data['book_name']) > 100:
            return {'status': 'FAIL', 'message': 'T√™n s√°ch qu√° d√†i (t·ªëi ƒëa 100 k√Ω t·ª±)'}
        
        return {'status': 'PASS', 'message': 'S·ª≠a s√°ch h·ª£p l·ªá'}
    
    def export_to_excel(self):
        """Export k·∫øt qu·∫£ ra Excel"""
        if not self.results:
            print("Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ export!")
            return
        
        # T·∫°o DataFrame
        df = pd.DataFrame(self.results)
        
        # T·∫°o th∆∞ m·ª•c k·∫øt qu·∫£
        os.makedirs('test_results', exist_ok=True)
        
        # T√™n file v·ªõi timestamp
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'test_results/edit_book_test_{timestamp}.xlsx'
        
        # Export Excel
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            # Sheet k·∫øt qu·∫£ chi ti·∫øt
            df.to_excel(writer, sheet_name='Edit Book Test Results', index=False)
            
            # T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt
            worksheet = writer.sheets['Edit Book Test Results']
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 40)
                worksheet.column_dimensions[column_letter].width = adjusted_width
            
            # Sheet th·ªëng k√™
            total = len(self.results)
            passed = len([r for r in self.results if r['Status'] == 'PASS'])
            failed = total - passed
            expected_pass = len([r for r in self.results if r['Expected'] == 'PASS'])
            expected_fail = len([r for r in self.results if r['Expected'] == 'FAIL'])
            alert_found = len([r for r in self.results if r['Alert Found']])
            alert_valid = len([r for r in self.results if r['Alert Valid']])
            pass_rate = round((passed/total)*100, 1) if total > 0 else 0
            
            # Th·ªëng k√™ theo lo·∫°i test
            fail_cases = {
                'Tr∆∞·ªùng tr·ªëng': len([r for r in self.results if 'tr·ªëng' in r['Test Case'].lower()]),
                'ID validation': len([r for r in self.results if any(word in r['Test Case'].lower() for word in ['id √¢m', 'id b·∫±ng 0', 'id c√≥ ch·ªØ', 'kh√¥ng t·ªìn t·∫°i'])]),
                'Validation l·ªói': len([r for r in self.results if any(word in r['Test Case'].lower() for word in ['√¢m', 'l·ªõn', 'ch·ªØ'])]),
                'H·ª£p l·ªá': len([r for r in self.results if r['Expected'] == 'PASS'])
            }
            
            summary = pd.DataFrame({
                'Th√¥ng s·ªë': [
                    'T·ªïng s·ªë test', 
                    'Th·ª±c t·∫ø PASS', 
                    'Th·ª±c t·∫ø FAIL',
                    'Mong ƒë·ª£i PASS',
                    'Mong ƒë·ª£i FAIL',
                    'T·ª∑ l·ªá ƒë√∫ng (%)',
                    'Alert xu·∫•t hi·ªán',
                    'Alert h·ª£p l·ªá',
                    'Avg execution time (s)',
                    '---',
                    'Test tr∆∞·ªùng tr·ªëng',
                    'Test ID validation',
                    'Test validation l·ªói',
                    'Test h·ª£p l·ªá'
                ],
                'Gi√° tr·ªã': [
                    total, 
                    passed, 
                    failed, 
                    expected_pass, 
                    expected_fail, 
                    pass_rate,
                    alert_found,
                    alert_valid,
                    round(sum([r['Th·ªùi gian (s)'] for r in self.results]) / total, 2) if total > 0 else 0,
                    '---',
                    fail_cases['Tr∆∞·ªùng tr·ªëng'],
                    fail_cases['ID validation'],
                    fail_cases['Validation l·ªói'],
                    fail_cases['H·ª£p l·ªá']
                ]
            })
            summary.to_excel(writer, sheet_name='Summary', index=False)
            
            # Sheet test data g·ªëc
            df_original = pd.read_csv(self.csv_file)
            df_original.to_excel(writer, sheet_name='Test Data G·ªëc', index=False)
        
        print(f"\nüìä ƒê√£ xu·∫•t k·∫øt qu·∫£ ra file: {filename}")
        return filename
    
    def cleanup(self):
        """D·ªçn d·∫πp file dummy"""
        try:
            dummy_file = os.path.abspath("dummy_edit_book_cover.txt")
            if os.path.exists(dummy_file):
                os.remove(dummy_file)
        except:
            pass
    
    def run_tests(self):
        """Ch·∫°y t·∫•t c·∫£ test cases t·ª´ CSV"""
        print("=" * 70)
        print("üß™ B·∫ÆT ƒê·∫¶U TEST EDIT S√ÅCH T·ª™ FILE CSV")
        print("=" * 70)
        
        # ƒê·ªçc d·ªØ li·ªáu test t·ª´ CSV
        test_data_list = self.load_test_data()
        
        if not test_data_list:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu test ƒë·ªÉ ch·∫°y!")
            return
        
        # Thi·∫øt l·∫≠p driver
        self.setup_driver()
        
        print(f"üöÄ S·∫Ω ch·∫°y {len(test_data_list)} test cases...")
        print("üìù Test bao g·ªìm: Book ID, t√™n s√°ch, s·ªë trang, Author ID, Category ID")
        
        # Ch·∫°y t·ª´ng test
        for test_data in test_data_list:
            self.test_edit_book(test_data)
            time.sleep(1)  # Ngh·ªâ 1 gi√¢y gi·ªØa c√°c test
        
        # ƒê√≥ng browser
        self.driver.quit()
        
        # D·ªçn d·∫πp
        self.cleanup()
        
        # Hi·ªÉn th·ªã t√≥m t·∫Øt k·∫øt qu·∫£
        print("\n" + "=" * 70)
        print("üìã T√ìM T·∫ÆT K·∫æT QU·∫¢ TEST EDIT S√ÅCH")
        print("=" * 70)
        
        total = len(self.results)
        passed = len([r for r in self.results if r['Status'] == 'PASS'])
        failed = total - passed
        expected_pass = len([r for r in self.results if r['Expected'] == 'PASS'])
        alert_found = len([r for r in self.results if r['Alert Found']])
        alert_valid = len([r for r in self.results if r['Alert Valid']])
        
        print(f"üìä T·ªïng s·ªë test: {total}")
        print(f"‚úÖ Test ƒë√∫ng: {passed}")
        print(f"‚ùå Test sai: {failed}")
        print(f"üéØ Test cases mong ƒë·ª£i PASS: {expected_pass}")
        print(f"üîî Alert xu·∫•t hi·ªán: {alert_found}")
        print(f"‚úîÔ∏è Alert h·ª£p l·ªá: {alert_valid}")
        print(f"üìà T·ª∑ l·ªá test ƒë√∫ng: {round((passed/total)*100, 1)}%")
        
        # Th·ªëng k√™ theo lo·∫°i
        print(f"\nüìä Ph√¢n lo·∫°i test:")
        print(f"   üìù Test tr∆∞·ªùng tr·ªëng: {len([r for r in self.results if 'tr·ªëng' in r['Test Case'].lower()])}")
        print(f"   üÜî Test ID validation: {len([r for r in self.results if any(word in r['Test Case'].lower() for word in ['id √¢m', 'id b·∫±ng 0', 'id c√≥ ch·ªØ', 'kh√¥ng t·ªìn t·∫°i'])])}")
        print(f"   ‚ö†Ô∏è Test validation: {len([r for r in self.results if any(word in r['Test Case'].lower() for word in ['√¢m', 'l·ªõn', 'ch·ªØ'])])}")
        print(f"   ‚úÖ Test h·ª£p l·ªá: {len([r for r in self.results if r['Expected'] == 'PASS'])}")
        
        print("\nüìã Chi ti·∫øt k·∫øt qu·∫£:")
        for result in self.results:
            status_icon = "‚úÖ" if result['Status'] == 'PASS' else "‚ùå"
            alert_icon = "üîî" if result['Alert Found'] else "üîï"
            print(f"{status_icon}{alert_icon} #{result['STT']} {result['Test Case']}: {result['Status']} - {result['Ghi ch√∫']}")
        
        # Export Excel
        excel_file = self.export_to_excel()
        
        print(f"\nüéâ Ho√†n th√†nh! File Excel: {excel_file}")
        print(f"üìÅ File CSV g·ªëc: {self.csv_file}")

if __name__ == "__main__":
    # Ch·∫°y test t·ª´ CSV
    test = EditBookTestCSV("edit_book_test_data.csv")
    test.run_tests() 